#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 10 18:01:19 2020

@author: nitolapio
"""
import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

mnist_dataset = keras.datasets.mnist

(X_train, y_train), (X_test, y_test) = mnist_dataset.load_data() # Cogemos y cargamos los datos separándolos. Aquí sí funcionan, no como con el fashion

class_names = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']

# Con esto vemos la base de lo que es una imágen
'''
plt.figure()
plt.imshow(X_train[0])
plt.colorbar()
plt.grid(False)
plt.show()
'''

X_train = X_train / 255.0
X_test = X_test / 255.0

#Vamos a comprobar que está bien
'''
plt.figure(figsize =(10,10))
for i in range(4):
    plt.subplot(5, 5, i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(X_train[i], cmap = plt.cm.binary)
    plt.xlabel(class_names[y_train[i]])
plt.show()
'''

# Creamos un modelo Sequential
model = keras.Sequential([
    keras.layers.Flatten(input_shape = (28,28)),
    keras.layers.Dense(70, activation = 'relu'),
    keras.layers.Dense(10, activation = 'softmax')
    ])

#Compilar el modelo
model.compile(optimizer='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

#Entrenamos el modelo
model.fit(X_train, y_train, epochs=5)   # Hay un poco de sobreentrenamiento pero lo voy a dejar pasar

#Evaluamos la exactitud
test_loss, test_acc = model.evaluate(X_test, y_test, verbose = 2)

print('\nTest accuracy: ', test_acc)


#####################################################  Hasta aquí el entrenamiento del modelo


# Hacer predicciones
predictions= model.predict(X_test)

print(np.argmax(predictions[0]))  # Esta es la predicción que ha hecho del primer elemento


# Ahora vamos a graficar las predicciones

def plot_image(i, predictions_array, true_label, img): #Creamos una funcion para hacer un plot
  predictions_array, true_label, img = predictions_array, true_label[i], img[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  
  plt.imshow(img, cmap = plt.cm.binary)   #Cmap es para el color
  
  predicted_label = np.argmax(predictions_array)  #hacemos que esta variable sea el número que ha acertado el modelo del array de predicciones
  
  if predicted_label == true_label:
      color = 'blue'
  else:
      color = 'red'
  plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                100*np.max(predictions_array),
                                class_names[true_label]),
                                color=color)
  
             
             
def plot_value_array(i, predictions_array, true_label):
  predictions_array, true_label = predictions_array, true_label[i]
  plt.grid(False)
  plt.xticks(range(10))
  plt.yticks([])
  thisplot = plt.bar(range(10), predictions_array, color="#777777")
  plt.ylim([0, 1])
  predicted_label = np.argmax(predictions_array)

  thisplot[predicted_label].set_color('red')
  thisplot[true_label].set_color('blue')


#Ejemplo de la primera imagen
i = 12
plt.figure(figsize=(6,3))
plt.subplot(1, 2, 1)
plot_image(i, predictions[i], y_test, X_test)
plt.subplot(1, 2, 2)
plot_value_array(i, predictions[i], y_test)
plt.show()

#Aquí graficamos unas cuantas
num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions[i], y_test, X_test)
  plt.subplot(num_rows, 2*num_cols, 2*i+2)
  plot_value_array(i, predictions[i], y_test)
plt.tight_layout()
plt.show()



























